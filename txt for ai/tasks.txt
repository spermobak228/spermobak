/**
 * –û—Å–Ω–æ–≤–Ω–æ–π JavaScript —Ñ–∞–π–ª –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞–Ω–∏–π
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
import { applyTelegramColorScheme, setupScrollbarVisibility, initTgsSupport } from './modules/ui-utils.js';
import { setupNavigation } from './modules/navigation.js';
import { renderTask, completeTask, verifyTaskCompletion, TaskTypes, openChannelForSubscription } from './modules/tasks/index_tasks.js';
import { showTaskComplete } from './modules/tasks/task-complete-modal.js';
import TimerManager from './modules/tasks/utils/TimerManager.js';
import TasksOptimizer from './modules/tasks/TasksOptimizer.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let telegram = window.Telegram.WebApp;
let userInfo = null;
let isTasksPageInitialized = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
let tasksData = [];
let renderPromise = null; // Promise –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ // –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function initTasksPage() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    if (isTasksPageInitialized) {
        console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    isTasksPageInitialized = true;
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π');
    
    let initSuccess = false;
    
    try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å—Ä–∞–∑—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        applyTelegramColorScheme();
        setupScrollbarVisibility();
        setupNavigation(document.querySelectorAll('.bottom-nav .nav-item'), {});
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (telegram) {
            telegram.expand(); // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É TGS –∞–Ω–∏–º–∞—Ü–∏–π
        initTgsSupport();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TimerManager –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
        try {
            TimerManager.initTimerManager();
            console.log('TimerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (timerError) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TimerManager:', timerError);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏–π
        if (!window.tasksOptimizer) {
            try {
                window.tasksOptimizer = new TasksOptimizer();
                console.log('TasksOptimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } catch (optimizerError) {
                console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TasksOptimizer:', optimizerError);
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º i18n
        if (window.i18n) {
            try {
                document.querySelectorAll('.tasks-filter-item').forEach(item => {
                    const key = item.getAttribute('data-i18n');
                    if (key) {
                        item.textContent = window.i18n.t(key);
                    }
                });
                console.log('–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞');
            } catch (i18nError) {
                console.error('–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', i18nError);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            userInfo = telegram?.initDataUnsafe?.user || null;
            
            if (!userInfo || !userInfo.id) {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ URL –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                if (window.isDevMode) {
                    userInfo = { id: 136814725, first_name: 'Test User' };
                    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
                } else {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
                }
            }
            
            console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userInfo);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showTasksError('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞–Ω–∏–π
        try {
            initTaskFilters();
            console.log('–§–∏–ª—å—Ç—Ä—ã –∑–∞–¥–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (filtersError) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤:', filtersError);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–¥–∞–Ω–∏–π...');
        await fetchTasks();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞
        console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞...');
        const renderStartTime = performance.now();
        await waitForTasksRender();
        const renderEndTime = performance.now();
        console.log(`‚úÖ –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Math.round(renderEndTime - renderStartTime)}–º—Å`);
        
        initSuccess = true;
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        showTasksError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        try {
            const preloader = document.getElementById('preloader');
            if (preloader) {
                console.log(`üé≠ –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä (—Å—Ç–∞—Ç—É—Å: ${initSuccess ? '—É—Å–ø–µ—Ö' : '–æ—à–∏–±–∫–∞'})`);
                preloader.classList.add('hidden');
                setTimeout(() => {
                    if (preloader.parentNode) {
                        preloader.style.display = 'none';
                        console.log('üé≠ –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã—Ç');
                    }
                }, initSuccess ? 300 : 1000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        } catch (preloaderError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–∞:', preloaderError);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø)
async function fetchTasks() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userId = userInfo?.id;
        
        if (!userId) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            showTasksError('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return;
        }
        
        let result;
        let attemptCount = 0;
        const maxAttempts = 3;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        while (attemptCount < maxAttempts) {
            try {
                attemptCount++;
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attemptCount} –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                
                // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π
                if (window.tasksOptimizer) {
                    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è INITIAL_LOAD');
                    result = await window.tasksOptimizer.getOptimizedTasks(
                        userId, 
                        window.tasksOptimizer.ACTION_TYPES.INITIAL_LOAD
                    );
                    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', result);
                } else {
                    console.warn('TasksOptimizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π API');
                    result = await fetchTasksFallback(userId);
                }
                
                // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if (result && result.success) {
                    break;
                }
                
                console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attemptCount} –Ω–µ—É–¥–∞—á–Ω–∞:`, result?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                if (attemptCount < maxAttempts) {
                    await new Promise(resolve => setTimeout(resolve, 1000 * attemptCount));
                }
                
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ ${attemptCount}:`, error);
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                if (attemptCount === maxAttempts || error.message.includes('NetworkError')) {
                    console.warn('–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback API');
                    try {
                        result = await fetchTasksFallback(userId);
                        if (result && result.success) {
                            break;
                        }
                    } catch (fallbackError) {
                        console.error('Fallback API —Ç–∞–∫–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', fallbackError);
                    }
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                if (attemptCount < maxAttempts) {
                    await new Promise(resolve => setTimeout(resolve, 1000 * attemptCount));
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (!result || !result.success) {
            throw new Error(result?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        tasksData = result.tasks || [];
        
        if (tasksData.length > 0) {
            console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${tasksData.length} –∑–∞–¥–∞–Ω–∏–π, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä`);
            // –†–µ–Ω–¥–µ—Ä–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Promise
            renderPromise = renderServerTasks(tasksData);
        } else {
            console.log('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç
            showEmptyTasksMessage();
            renderPromise = Promise.resolve(); // –°–æ–∑–¥–∞–µ–º resolved Promise –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
        hideEmptyMessagesIfTasksExist();
        
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
        showTasksError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        renderPromise = Promise.resolve(); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º resolved Promise –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π API
async function fetchTasksFallback(userId) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const apiUrl = window.isDevMode ? '/dev/api/tasks/get' : '/api/tasks/get';
    
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            user_id: userId
        })
    });
    
    if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
    }
    
    return response.json();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∑–∞–¥–∞–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
async function renderServerTasks(tasks) {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä –∑–∞–¥–∞–Ω–∏–π:', tasks.length);
    
    if (!tasks || tasks.length === 0) {
        console.log('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç');
        showEmptyTasksMessage();
        return Promise.resolve();
    }
    
    try {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π
        clearTaskContainers();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicators();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É (–¥–µ–ª–∞–µ–º —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
        const dailyTasks = [];
        const weeklyTasks = [];
        const specialTasks = [];
        const achievementTasks = [];
        
        tasks.forEach(task => {
            if (!task || !task.type) {
                console.warn('–ó–∞–¥–∞–Ω–∏–µ –±–µ–∑ —Ç–∏–ø–∞:', task);
                return;
            }
            
            switch (task.type) {
                case 'daily':
                    dailyTasks.push(task);
                    break;
                case 'weekly':
                    weeklyTasks.push(task);
                    break;
                case 'special':
                    specialTasks.push(task);
                    break;
                case 'achievement':
                    achievementTasks.push(task);
                    break;
                default:
                    console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', task.type);
            }
        });
        
        console.log(`–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –∑–∞–¥–∞–Ω–∏—è: –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ=${dailyTasks.length}, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ=${weeklyTasks.length}, –æ—Å–æ–±—ã–µ=${specialTasks.length}, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è=${achievementTasks.length}`);
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–æ–±—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        const uncompletedSpecialTasks = specialTasks.filter(task => task.status !== 'completed');
        const completedSpecialTasks = specialTasks.filter(task => task.status === 'completed');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Promise
        return new Promise((resolve, reject) => {
            requestAnimationFrame(() => {
                console.log('–û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–Ω–¥–µ—Ä –≥—Ä—É–ø–ø');
                clearTaskContainers();
                
                // –†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                const renderPromises = [
                    renderTaskGroupAsync(uncompletedSpecialTasks, 'topSpecialTasks', '–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Å–æ–±—ã–µ'),
                    renderTaskGroupAsync(dailyTasks, 'dailyTasks', '–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ'),
                    renderTaskGroupAsync(weeklyTasks, 'weeklyTasks', '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ'),
                    renderTaskGroupAsync(completedSpecialTasks, 'specialTasks', '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Å–æ–±—ã–µ'),
                    renderTaskGroupAsync(achievementTasks, 'achievementTasks', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è')
                ];
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤
                Promise.all(renderPromises).then(() => {
                    console.log('–í—Å–µ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã');
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
                    try {
                        restoreSubscriptionTimers([...specialTasks, ...dailyTasks, ...weeklyTasks, ...achievementTasks]);
                        console.log('–¢–∞–π–º–µ—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
                    } catch (timerError) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤:', timerError);
                    }
                    
                    // –†–µ–∑–æ–ª–≤–∏–º Promise –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
                    resolve();
                    
                }).catch(renderError => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –≥—Ä—É–ø–ø –∑–∞–¥–∞–Ω–∏–π:', renderError);
                    showTasksError('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π');
                    reject(renderError);
                });
            });
        });
        
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –∑–∞–¥–∞–Ω–∏–π:', error);
        showTasksError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π');
        return Promise.reject(error);
    }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π
async function renderTaskGroupAsync(tasks, containerId, groupName) {
    return new Promise((resolve, reject) => {
        try {
            console.log(`–†–µ–Ω–¥–µ—Ä–∏–º –≥—Ä—É–ø–ø—É "${groupName}": ${tasks.length} –∑–∞–¥–∞–Ω–∏–π`);
            
            if (tasks.length === 0) {
                console.log(`–ì—Ä—É–ø–ø–∞ "${groupName}" –ø—É—Å—Ç–∞`);
                resolve();
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
            setTimeout(() => {
                try {
                    renderTaskGroup(tasks, containerId);
                    console.log(`–ì—Ä—É–ø–ø–∞ "${groupName}" –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
                    resolve();
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –≥—Ä—É–ø–ø—ã "${groupName}":`, error);
                    reject(error);
                }
            }, 0);
            
        } catch (error) {
            reject(error);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
function showLoadingIndicators() {
    const containers = ['topSpecialTasks', 'dailyTasks', 'weeklyTasks', 'specialTasks', 'achievementTasks'];
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container) {
            const loadingIndicator = document.createElement('div');
            loadingIndicator.className = 'task-loading-indicator';
            loadingIndicator.textContent = window.i18n?.t('tasks.loading', { defaultValue: '–ó–∞–≥—Ä—É–∑–∫–∞...' }) || '–ó–∞–≥—Ä—É–∑–∫–∞...';
            container.appendChild(loadingIndicator);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π
function clearTaskContainers() {
    const containers = [
        document.getElementById('topSpecialTasks'),
        document.getElementById('dailyTasks'),
        document.getElementById('weeklyTasks'),
        document.getElementById('specialTasks'),
        document.getElementById('achievementTasks')
    ];
    
    containers.forEach(container => {
        if (container) {
            container.innerHTML = '';
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –∑–∞–¥–∞–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
function renderTaskGroup(tasks, containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DOM
    const fragment = document.createDocumentFragment();
    
    tasks.forEach(task => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç renderTask –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç–æ—á–µ–∫
        renderTask(task, fragment, handleTaskAction);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞ –æ–¥–Ω—É DOM-–æ–ø–µ—Ä–∞—Ü–∏—é
    container.appendChild(fragment);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π
function initTaskFilters() {
    const filterItems = document.querySelectorAll('.tasks-filter-item');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ñ–∏–ª—å—Ç—Ä—ã
    filterItems.forEach(item => {
        item.addEventListener('click', () => {
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filterItems.forEach(filter => filter.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
            item.classList.add('active');
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            filterTasks(item.dataset.filter);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π
function filterTasks(filterType) {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    const dailyHeader = document.querySelector('[data-i18n="tasks.daily"]');
    const weeklyHeader = document.querySelector('[data-i18n="tasks.weekly"]');
    const specialHeader = document.querySelector('[data-i18n="tasks.special"]');
    const achievementsHeader = document.querySelector('[data-i18n="tasks.achievements"]');
    
    const topSpecialTasksSection = document.getElementById('topSpecialTasksSection');
    const topSpecialTasks = document.getElementById('topSpecialTasks');
    const dailyTasks = document.getElementById('dailyTasks');
    const weeklyTasks = document.getElementById('weeklyTasks');
    const specialTasks = document.getElementById('specialTasks');
    const achievementTasks = document.getElementById('achievementTasks');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
    const emptyDailyTasks = document.getElementById('emptyDailyTasks');
    const emptyWeeklyTasks = document.getElementById('emptyWeeklyTasks');
    const emptySpecialTasks = document.getElementById('emptySpecialTasks');
    const emptyAchievementTasks = document.getElementById('emptyAchievementTasks');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫ —á–µ—Ä–µ–∑ i18n
    if (window.i18n) {
        const emptyText = window.i18n.t('tasks.no_tasks_available');
        if (emptyDailyTasks) emptyDailyTasks.textContent = emptyText;
        if (emptyWeeklyTasks) emptyWeeklyTasks.textContent = emptyText;
        if (emptySpecialTasks) emptySpecialTasks.textContent = emptyText;
        if (emptyAchievementTasks) emptyAchievementTasks.textContent = emptyText;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–∑–¥–µ–ª–µ
    function hasTasksInSection(section) {
        if (!section) return false;
        const taskCards = section.querySelectorAll('.task-card');
        return taskCards.length > 0;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞–Ω–∏–π
    function showSection(section, emptyMessage, showHeader = true) {
        if (!section) return;
        
        section.style.display = '';
        
        if (hasTasksInSection(section)) {
            // –ï—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è - —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            if (emptyMessage) emptyMessage.style.display = 'none';
        } else {
            // –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            if (emptyMessage) emptyMessage.style.display = '';
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Å–µ–∫—Ü–∏–∏
    function hideSection(section, header) {
        if (section) section.style.display = 'none';
        if (header) header.style.display = 'none';
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
    switch (filterType) {
        case 'all':
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Å–æ–±—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤–≤–µ—Ä—Ö—É (—Ç–æ–ª—å–∫–æ –≤ —Ñ–∏–ª—å—Ç—Ä–µ "–í—Å–µ")
            showElement(topSpecialTasksSection);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            showElement(dailyHeader);
            showSection(dailyTasks, emptyDailyTasks);
            
            showElement(weeklyHeader);
            showSection(weeklyTasks, emptyWeeklyTasks);
            
            showElement(specialHeader);
            showSection(specialTasks, emptySpecialTasks);
            
            showElement(achievementsHeader);
            showSection(achievementTasks, emptyAchievementTasks);
            break;
            
        case 'daily':
            // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å–æ–±—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            hideElement(topSpecialTasksSection);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            hideElement(dailyHeader);
            showSection(dailyTasks, emptyDailyTasks);
            
            hideSection(weeklyTasks, weeklyHeader);
            hideSection(specialTasks, specialHeader);
            hideSection(achievementTasks, achievementsHeader);
            break;
            
        case 'weekly':
            // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å–æ–±—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            hideElement(topSpecialTasksSection);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            hideSection(dailyTasks, dailyHeader);
            
            hideElement(weeklyHeader);
            showSection(weeklyTasks, emptyWeeklyTasks);
            
            hideSection(specialTasks, specialHeader);
            hideSection(achievementTasks, achievementsHeader);
            break;
            
        case 'special':
            // –°–∫—Ä—ã–≤–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å–æ–±—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ö
            hideElement(topSpecialTasksSection);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–æ–±—ã–µ –∑–∞–¥–∞–Ω–∏—è –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            hideSection(dailyTasks, dailyHeader);
            hideSection(weeklyTasks, weeklyHeader);
            
            hideElement(specialHeader);
            showSection(specialTasks, emptySpecialTasks);
            
            hideSection(achievementTasks, achievementsHeader);
            break;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function showElement(element) {
    if (element) {
        element.style.display = '';
    }
}

function hideElement(element) {
    if (element) {
        element.style.display = 'none';
    }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥–ª—É—à–µ–∫, –µ—Å–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
function hideEmptyMessagesIfTasksExist() {
    const sections = [
        { tasksId: 'dailyTasks', emptyId: 'emptyDailyTasks' },
        { tasksId: 'weeklyTasks', emptyId: 'emptyWeeklyTasks' },
        { tasksId: 'specialTasks', emptyId: 'emptySpecialTasks' },
        { tasksId: 'achievementTasks', emptyId: 'emptyAchievementTasks' }
    ];
    
    sections.forEach(section => {
        const tasksContainer = document.getElementById(section.tasksId);
        const emptyMessage = document.getElementById(section.emptyId);
        
        if (tasksContainer && emptyMessage) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–¥–∞–Ω–∏–π
            const hasCards = tasksContainer.querySelectorAll('.task-card').length > 0;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
            emptyMessage.style.display = hasCards ? 'none' : '';
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–¥–∞–Ω–∏—è
async function handleTaskAction(task) {
    const taskElement = document.querySelector(`[data-task-id="${task.id}"]`);
    const button = taskElement?.querySelector('.task-button');
        
    console.log('–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', task);
    
    try {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        if (task.verifierType === 'subscription' && task.status === 'not_started') {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            openChannelForSubscription(task.subscriptionInfo?.inviteLink || "https://t.me/+hmWyUf44YdcwZDYy");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading-spinner"></span>';
                button.classList.add('loading');
                button.disabled = true;
                button.dataset.originalText = originalText;
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            const checkSubscriptionWithRetries = async (attempt = 1, maxAttempts = 2) => {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${attempt}/${maxAttempts} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}`);
                
            const isSubscribed = await verifyTaskCompletion(task);
            
                         if (isSubscribed) {
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                 task.status = 'in_progress';
                 
                 if (taskElement && !taskElement.classList.contains('has-timer')) {
                     taskElement.classList.add('has-timer');
                 }
                
                    if (button) {
                        button.classList.remove('loading');
                    }
                    
                const timerElement = taskElement?.querySelector('.task-timer');
                if (timerElement) {
                    document.addEventListener('timerExpired', function timerExpiredHandler(e) {
                        if (e.detail.taskId === task.id) {
                                button.textContent = window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å';
                                button.disabled = false;
                                document.removeEventListener('timerExpired', timerExpiredHandler);
                            localStorage.setItem(`subscription_timer_expired_${task.id}`, 'true');
                        }
                    });
                }
                    return { success: true };
                }
                
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏
                if (attempt < maxAttempts) {
                    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/${maxAttempts})`);
                    setTimeout(() => {
                        checkSubscriptionWithRetries(attempt + 1, maxAttempts);
                    }, 3000);
            } else {
                    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    console.log('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"');
                
                    task.status = 'check_manually';
                    
                if (button) {
                        button.innerHTML = window.i18n?.t('tasks.btn_check') || '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
                    button.classList.remove('loading');
                    button.disabled = false;
                }
            }
            
                return { success: false };
            };
        
            // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                checkSubscriptionWithRetries(1, 2);
            }, 3000);
            
            return { success: false };
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        if (task.verifierType === 'subscription' && task.status === 'check_manually') {
            console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:', task.id);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading-spinner"></span>';
                button.classList.add('loading');
                button.disabled = true;
                button.dataset.originalText = originalText;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            const isSubscribed = await verifyTaskCompletion(task, true);
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            const checkSubscriptionWithRetries = async (attempt = 1, maxAttempts = 2) => {
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ${attempt}/${maxAttempts} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}`);
                
                const isSubscribed = await verifyTaskCompletion(task, true);
                
                if (isSubscribed) {
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    task.status = 'in_progress';
                    
                    if (taskElement && !taskElement.classList.contains('has-timer')) {
                        taskElement.classList.add('has-timer');
                    }
                    
                    if (button) {
                        button.classList.remove('loading');
                    }
                    
                    const timerElement = taskElement?.querySelector('.task-timer');
                    if (timerElement) {
                        timerElement.addEventListener('click', () => {
                            const currentExpired = localStorage.getItem(`subscription_timer_expired_${task.id}`) === 'true';
                            if (currentExpired) {
                                handleTaskAction(task);
                            }
                        });
                        
                        document.addEventListener('timerExpired', function timerExpiredHandler(e) {
                            if (e.detail.taskId === task.id) {
                                    button.textContent = window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å';
                                button.style.display = '';
                                document.removeEventListener('timerExpired', timerExpiredHandler);
                            }
                        });
                    }
                    
                    return { success: true };
                } else {
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é');
                    task.status = 'not_started';
                    if (button) {
                        button.innerHTML = window.i18n?.t('tasks.btn_subscribe') || '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
                        button.classList.remove('loading');
                        button.disabled = false;
                    }
                }
                
                return { success: false };
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if (isSubscribed) {
                return await checkSubscriptionWithRetries();
            } else {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ check_manually');
                
                if (taskElement) {
                    const existingTimer = taskElement.querySelector('.task-timer');
                    if (existingTimer) {
                        existingTimer.remove();
                    }
                    taskElement.classList.remove('has-timer');
                }
                
                const isSubscribed = await verifyTaskCompletion(task, true);
                if (!isSubscribed) {
                task.status = 'not_started';
                if (button) {
                    button.innerHTML = window.i18n?.t('tasks.btn_subscribe') || '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è';
                    button.classList.remove('loading');
                    button.disabled = false;
                }
                    console.log(`–ó–∞–¥–∞–Ω–∏–µ ${task.id} —Å–±—Ä–æ—à–µ–Ω–æ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é not_started –∏–∑-–∑–∞ –æ—Ç–ø–∏—Å–∫–∏`);
                
                    return { success: false };
                }
            }
            
            setTimeout(() => {
                return checkSubscriptionWithRetries();
            }, 3000);
            
            return { success: false };
                }
                
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        if (task.verifierType === 'subscription' && task.status === 'in_progress' && 
            (localStorage.getItem(`subscription_timer_expired_${task.id}`) === 'true' || !task.wait_until)) {
            
            return await executeTaskCompletion(task, taskElement, button, false);
        }

        // === –ï–î–ò–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –í–°–ï–• –û–°–¢–ê–õ–¨–ù–´–• –ó–ê–î–ê–ù–ò–ô ===
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        const needsVerification = task.verifierType !== 'experience';
        
        return await executeTaskCompletion(task, taskElement, button, needsVerification);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è:', error);
        return { success: false };
    }
        }
        
/**
 * –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
 */
async function executeTaskCompletion(task, taskElement, button, needsVerification = true) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –∫–Ω–æ–ø–∫–µ
            if (button) {
                const originalText = button.innerHTML;
                button.innerHTML = '<span class="loading-spinner"></span>';
                button.classList.add('loading');
                button.disabled = true;
                button.dataset.originalText = originalText;
            }
            
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        let isCompleted = true;
        if (needsVerification) {
            isCompleted = await verifyTaskCompletion(task);
        }

        if (isCompleted) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            const result = await completeTask(task.id);
            
            if (result && result.success) {
                // –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                return handleTaskSuccess(task, taskElement, button, result);
            } else {
                // –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                return handleTaskError(task, taskElement, button, result);
            }
        } else {
            // –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            return handleTaskProgress(task, taskElement, button);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', error);
        return handleTaskError(task, taskElement, button, { error: error.message });
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
 */
function handleTaskSuccess(task, taskElement, button, result) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                taskElement.classList.add('completed');
    taskElement.classList.remove('has-timer');
    
                if (button) {
                    button.textContent = '';
                    button.disabled = true;
        button.classList.remove('loading');
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–æ–±–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –Ω–∏–∂–Ω–∏–π –±–ª–æ–∫
    if (task.type === 'special') {
        moveCompletedSpecialTask(task.id);
    }
    
    // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
    if (task.verifierType === 'subscription') {
        localStorage.removeItem(`subscription_timer_expired_${task.id}`);
                }
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                incrementTasksCounter();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –Ω–∞–≥—Ä–∞–¥–æ–π
                showTaskComplete({
                    ...task,
                    reward: result.reward || task.reward
                }, () => {
                    console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
                });
    
    return { success: true };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
 */
function handleTaskError(task, taskElement, button, result) {
                if (button) {
                    button.disabled = false;
                    button.innerHTML = window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å';
                    button.classList.remove('loading');
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    const originalText = button.textContent;
                    button.textContent = result?.error === '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' ? 
                        (window.i18n?.t('tasks.btn_not_completed') || '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ') : 
                        (window.i18n?.t('common.error') || '–û—à–∏–±–∫–∞');
                    button.classList.add('task-button-error');
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        button.textContent = originalText;
                        button.classList.remove('task-button-error');
                    }, 2000);
                }
    
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è:', result);
    return { success: false };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è
 */
function handleTaskProgress(task, taskElement, button) {
            // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (task.hasOwnProperty('progress')) {
                const currentProgress = task.progress;
                task.progress = Math.min(100, currentProgress + 20);
                
                const progressBar = taskElement.querySelector('.task-progress-bar');
                const progressText = taskElement.querySelector('.task-progress-text');
                
                if (progressBar) {
                    progressBar.style.width = `${task.progress}%`;
                }
                
                if (progressText) {
                    progressText.textContent = `${task.progress}%`;
                }
                
                // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–≥ 100%, –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–ü–æ–ª—É—á–∏—Ç—å"
                if (task.progress >= 100) {
                    if (button) {
                        button.textContent = window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å';
                button.classList.remove('loading');
                button.disabled = false;
                            }
                            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            return executeTaskCompletion(task, taskElement, button, true);
        }
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    if (button) {
        button.classList.remove('loading');
        button.disabled = false;
        button.innerHTML = button.dataset.originalText || (window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å');
                }
    
    return { success: false };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π –ø–æ–¥–ø–∏—Å–∫–∏
function restoreSubscriptionTimers(tasks) {
    console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π:', tasks.length);
    
    tasks.forEach(task => {
        if (task.verifierType === 'subscription' && task.status === 'in_progress' && task.wait_until) {
            console.log(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}, wait_until: ${task.wait_until}`);
            
            const taskCard = document.querySelector(`.task-card[data-task-id="${task.id}"]`);
            if (taskCard) {
                console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–π–º–µ—Ä–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
                const existingTimer = taskCard.querySelector('.task-timer');
                if (existingTimer) {
                    console.log(`–¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π`);
                    existingTimer.remove();
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                TimerManager.setTimer(task.id, task.wait_until, taskCard);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å has-timer
                taskCard.classList.add('has-timer');
                
                // –í–ê–ñ–ù–û: –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                const button = taskCard.querySelector('.task-button');
                if (button) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ (–ø—Ä–æ–≥—Ä–µ—Å—Å >= 100%)
                    const isTaskCompleted = task.progress >= 100;
                    
                    if (!isTaskCompleted) {
                        button.style.display = 'none';
                        console.log(`–°–∫—Ä—ã–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id} –ø–æ–∫–∞ —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω`);
                    } else {
                        // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å"
                        button.style.display = '';
                        button.textContent = window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å';
                        console.log(`–ó–∞–¥–∞–Ω–∏–µ ${task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å"`);
                    }
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
                document.addEventListener('timerExpired', function timerExpiredHandler(e) {
                    if (e.detail.taskId === task.id) {
                        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                        document.removeEventListener('timerExpired', timerExpiredHandler);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
                        const button = taskCard?.querySelector('.task-button');
                        if (button) {
                            button.style.display = '';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                            button.textContent = window.i18n?.t('tasks.btn_claim') || '–ü–æ–ª—É—á–∏—Ç—å';
                            button.disabled = false;
                            console.log(`–¢–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id}, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å"`);
                        }
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
                        localStorage.setItem(`subscription_timer_expired_${task.id}`, 'true');
                    }
                });
            } else {
                console.warn(`–ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${task.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM`);
            }
        } else {
            console.log(`–ó–∞–¥–∞–Ω–∏–µ ${task.id} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞: verifierType=${task.verifierType}, status=${task.status}, wait_until=${task.wait_until}`);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –æ—Å–æ–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –Ω–∏–∂–Ω–∏–π
function moveCompletedSpecialTask(taskId) {
    try {
        // –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞–Ω–∏—è –≤ –≤–µ—Ä—Ö–Ω–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const topContainer = document.getElementById('topSpecialTasks');
        const taskCard = topContainer?.querySelector(`.task-card[data-task-id="${taskId}"]`);
        
        if (taskCard) {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∂–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å–æ–±—ã—Ö –∑–∞–¥–∞–Ω–∏–π
            const bottomContainer = document.getElementById('specialTasks');
            
            if (bottomContainer) {
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –Ω–∏–∂–Ω–∏–π
                taskCard.remove();
                bottomContainer.appendChild(taskCard);
                
                console.log(`–û—Å–æ–±–æ–µ –∑–∞–¥–∞–Ω–∏–µ ${taskId} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ –Ω–∏–∂–Ω–∏–π`);
                
                // –ï—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ —Å–µ–∫—Ü–∏—é (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ñ–∏–ª—å—Ç—Ä "all")
                const activeFilter = document.querySelector('.tasks-filter-item.active')?.dataset.filter;
                if (activeFilter === 'all' && topContainer.children.length === 0) {
                    const topSection = document.getElementById('topSpecialTasksSection');
                    if (topSection) {
                        topSection.style.display = 'none';
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Å–æ–±—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫—Ä—ã—Ç –∏ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
                if (activeFilter === 'all') {
                    const specialHeader = document.querySelector('[data-i18n="tasks.special"]');
                    const specialTasksEmpty = document.getElementById('emptySpecialTasks');
                    
                    if (specialHeader) {
                        specialHeader.style.display = '';
                    }
                    if (specialTasksEmpty) {
                        specialTasksEmpty.style.display = 'none';
                    }
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ—Å–æ–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
function incrementTasksCounter() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–±—Ä–∞–ª–∏ –±–ª–æ–∫ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    // –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
    console.log('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è race condition
let initializationAttempted = false;
let initializationPromise = null;

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
async function safeInitTasksPage() {
    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∂–¥–µ–º –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (initializationPromise) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
        return initializationPromise;
    }
    
    // –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if (initializationAttempted) {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        return Promise.resolve();
    }
    
    initializationAttempted = true;
    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π');
    
    initializationPromise = initTasksPage();
    
    try {
        await initializationPromise;
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
        initializationAttempted = false;
        initializationPromise = null;
        throw error;
    }
    
    return initializationPromise;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function checkReadinessAndInit() {
    const isDomReady = document.readyState !== 'loading';
    const areTranslationsReady = window.i18n && typeof window.i18n.t === 'function';
    
    console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: DOM=${isDomReady}, –ø–µ—Ä–µ–≤–æ–¥—ã=${areTranslationsReady}`);
    
    if (isDomReady && areTranslationsReady && !initializationAttempted) {
        console.log('–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        safeInitTasksPage().catch(error => {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        });
    }
}

// –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É DOM –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É
    checkReadinessAndInit();
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    document.addEventListener('translationsLoaded', () => {
        console.log('–°–æ–±—ã—Ç–∏–µ translationsLoaded –ø–æ–ª—É—á–µ–Ω–æ');
        checkReadinessAndInit();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    document.addEventListener('languageChanged', () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        document.querySelectorAll('.tasks-filter-item').forEach(item => {
            const key = item.getAttribute('data-i18n');
            if (key && window.i18n) {
                item.textContent = window.i18n.t(key);
            }
        });
    });
    
    // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(() => {
        if (!initializationAttempted) {
            console.log('–ó–∞–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã');
            checkReadinessAndInit();
        }
    }, 2000);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
checkReadinessAndInit();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π
function showTasksError(errorMessage) {
    const containers = ['dailyTasks', 'weeklyTasks', 'specialTasks', 'achievementTasks'];
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container) {
            container.innerHTML = `
                <div class="task-error">
                    <div class="error-icon">‚ö†Ô∏è</div>
                    <div class="error-message">${errorMessage}</div>
                    <button class="retry-button" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            `;
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
function showEmptyTasksMessage() {
    const containers = ['dailyTasks', 'weeklyTasks', 'specialTasks', 'achievementTasks'];
    containers.forEach(containerId => {
        const container = document.getElementById(containerId);
        if (container) {
            const emptyMessage = container.querySelector('.empty-message');
            if (emptyMessage) {
                emptyMessage.style.display = 'block';
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π
async function waitForTasksRender() {
    if (renderPromise) {
        try {
            console.log('–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π...');
            await renderPromise;
            console.log('–†–µ–Ω–¥–µ—Ä –∑–∞–¥–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∞:', error);
        }
    } else {
        console.log('–†–µ–Ω–¥–µ—Ä –∑–∞–¥–∞–Ω–∏–π –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω');
    }
} 